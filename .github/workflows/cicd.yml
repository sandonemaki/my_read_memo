name: 'ruby on rails CI/CD'
on:
  push:
    paths-ignore:
      - '**/*.md'
jobs:
  ci:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: my_read_memo_test
        ports:
          - 5432:5432
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Install dependencies
        run: sudo apt-get install -y libpq-dev

      - name: Set up Rails and run tests
        env:
          RAILS_ENV: test
          POSTGRES_HOST: localhost
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          bundle install
          bundle exec rake db:schema:load
          bundle exec rails db:migrate
          bundle exec rspec

  cd:
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' }}
    needs: ci
    steps:
      - name: Set up SSH key
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

      - name: Deploy from Vagrant to EC2 with SSH
        env:
          EC2_USER_NAME: ${{ secrets.EC2_USER_NAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          ssh $EC2_USER_NAME@$EC2_HOST -i ~/.ssh/id_rsa <<-EOF
          export PATH=\"/home/ubuntu/.anyenv/envs/rbenv/versions/3.0.4/bin:\$PATH\"
          cd my_read_memo
          bundle install
          git pull origin main
          RAILS_ENV=production bundle exec rails assets:precompile
          RAILS_ENV=production bundle exec rails db:migrate
          if [ -f tmp/pids/server.pid ]; then
            kill -INT $(cat tmp/pids/server.pid) || echo "Failed to gracefully stop the server"
            sleep 5
            if [ -f tmp/pids/server.pid ]; then
              kill -9 $(cat tmp/pids/server.pid) || echo "Failed to kill the server process"
              rm -f tmp/pids/server.pid
            fi
          fi
          bundle exec rails s -p 3000 -b '0.0.0.0' -e production -d
          EOF
